{"Name":"Realm","Id":2739,"Alias":"realm","Description":"Realm is a mobile database that runs directly inside phones, tablets or wearables.\r\n\r\n## Features\r\n\r\n* **Mobile-first:** Realm is the first database built from the ground up to run directly inside phones, tablets and wearables.\r\n* **Simple:** Data is directly [exposed as objects](https://realm.io/docs/xamarin/latest/#models) and [queryable by code](https://realm.io/docs/xamarin/latest/#queries), removing the need for ORM\u0027s riddled with performance \u0026 maintenance issues. Plus, we\u0027ve worked hard to [keep our API down to just 4 common classes](https://realm.io/docs/xamarin/latest/api/) (RealmObject, RealmList, RealmQuery and Realm): most of our users pick it up intuitively, getting simple apps up \u0026 running in minutes.\r\n* **Modern:** Realm supports relationships, generics, vectorization and modern C# idioms.\r\n* **Fast:** Realm is faster than even raw SQLite on common operations, while maintaining an extremely rich feature set.\r\n\r\nRealm Xamarin enables you to efficiently write your app\u0027s model layer in a safe, persisted and fast way. Here\u0027s what it looks like:\r\n\r\n```csharp\r\n// Define your models like regular C# classes\r\npublic class Dog : RealmObject \r\n{\r\n    public string Name { get; set; }\r\n    public int Age { get; set; }\r\n    public Person Owner { get; set; }\r\n}\r\n\r\npublic class Person : RealmObject \r\n{\r\n    public string Name { get; set; }\r\n    public RealmList\u003cDog\u003e Dogs { get; set; } \r\n}\r\n\r\n\r\n// Persist your data easily\r\nvar realm = Realm.GetInstance();\r\nrealm.Write(() =\u003e \r\n{\r\n    var mydog = realm.CreateObject\u003cDog\u003e();\r\n    mydog.Name = \"Rex\";\r\n    mydog.Age = 9;\r\n});\r\n\r\n// Query it with standard LINQ, either syntax\r\nvar r = realm.All\u003cDog\u003e().Where(d =\u003e d.Age \u003e 8);\r\nvar r2 = from d in realm.All\u003cDog\u003e() where  d.Age \u003e 8 select d;\r\n```\r\n\r\n\r\n\r\n","Version":"0.74.1","Summary":"Realm is a mobile database, an alternative to SQLite and key-value stores","QuickStart":"Realm Xamarin enables you to efficiently write your app\u0027s model layer in a safe, persisted and fast way. Here\u0027s what it looks like:\r\n\r\n```csharp\r\n// Define your models like regular C# classes\r\npublic class Dog : RealmObject \r\n{\r\n    public string Name { get; set; }\r\n    public int Age { get; set; }\r\n    public Person Owner { get; set; }\r\n}\r\n\r\npublic class Person : RealmObject \r\n{\r\n    public string Name { get; set; }\r\n    public RealmList\u003cDog\u003e Dogs { get; set; } \r\n}\r\n\r\n\r\n// Persist your data easily\r\nvar realm = Realm.GetInstance();\r\nrealm.Write(() =\u003e \r\n{\r\n    var mydog = realm.CreateObject\u003cDog\u003e();\r\n    mydog.Name = \"Rex\";\r\n    mydog.Age = 9;\r\n});\r\n\r\n// Query it with standard LINQ, either syntax\r\nvar r = realm.All\u003cDog\u003e().Where(d =\u003e d.Age \u003e 8);\r\nvar r2 = from d in realm.All\u003cDog\u003e() where  d.Age \u003e 8 select d;\r\n```\r\n\r\nLook into the documentation on [realm.io/docs/xamarin/latest/](https://realm.io/docs/xamarin/latest/).\r\n\r\n","Hash":"89da7c43d0bfd30161ef14f3f1dc10da","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}